#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('ccbc-rest:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001')
app.set('port', port)

/**
 * Create HTTP server.
 */
// HTTPサーバー起動
// var server = http.createServer(app)

// HTTPSサーバー起動
var fs = require('fs')
var https = require('https')
var options = {
  key: fs.readFileSync('/etc/letsencrypt/live/hokkaido-ima.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/hokkaido-ima.com/fullchain.pem')
}
var server = https.createServer(options, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * WebSocket(チャット機能用)
 */
io = require('socket.io')(server)
io.on('connection', function (socket) {
  // チャットルームの設定（接続した社員の社員PKがroom_id）
  socket.on('join', function (room_id) {
    console.log("chat join:", room_id)
    socket.join(room_id)
  })

  // チャットのメッセージを受信した場合、msgに設定している相手の社員PKに対して、メッセージを送信
  // メッセージはJSON形式を文字列化したデータとし、room_idに相手先の社員PKを設定すること
  socket.on('comcomcoin_chat', function (msg) {
    const room_id = JSON.parse(msg).room_id
    console.log("chat send message:", room_id, JSON.stringify(msg))
    io.to(room_id).emit('comcomcoin_chat', msg)
  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
